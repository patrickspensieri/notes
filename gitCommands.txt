see status
	git status

activity log
	git log

show some commit diff
	git show <commit-hash>
	// commit hash need not be complete
	git show afa56

show all branches
	// local
	git branch
	// local and remote
	git branch -r

change branch
	git checkout branchName

push local branch to remote
	git push -u origin branchName

create new local branch
	git branch branchName

delete local branch
	git branch -D localBranchName

pull remote branch
	git fetch
	git checkout branchName

delete remote branch
	git push origin --delete remoteBranchName

compare file between branches
	git diff branchName master -- fileName.txt

rename a local and remote branch
	// rename the local branch
	git branch -m old-name new-name
	// delete the old-name remote branch, push the new-name local one
	git push origin :old-name new-name
	// reset the upstream branch for the new-name local branch
	git checkout new-name
	git push origin -u new-name

rename a file
	git mv fileName newName

merging branches
	// merge feature into master
	git checkout master
	git merge feature
	// abort a merge
	git merge --abort
	

stashing/popping files
	git stash save fileName
	//git checkout otherBranch
	//make changes
	//git checkout originalBranch
	//get the stashed file back
	git stash pop
	// apply an earlier stash (n=0 being latest)
	git stash apply n

list and drop(deleting) stashed files
	git stash list
	//stash@{0}: branchName: 0234h32 fixed bug
	git stash drop stash@{0}
	//Dropped stash@{0} (...)

staging/unstaging files
	git add fileName
	git reset fileName

discard all unstaged changes
	// stash all the unstaged changes being tracked
	git stash save --keep-index
	// discard the stash
	git stash drop

amend the most recent commit if not pushed
	// will commit any staged changes
	// allows for the commit message to be changed
	git commit --amend

revert an un-pushed commit without discarding changes
	git reset HEAD~1 --soft

commit a multiline message with editor
	git commit

commit a multiline message that starts with a hastag in vim
	// often, commit messages start with #issueNumber
	git commit --cleanup=whitespace
	// remove all undesired lines starting with #
	// enter formatted commit message, save and exit vim

hard reset branch to last commit
	git reset HEAD --hard

reset single file to HEAD
	git checkout HEAD -- fileName.txt

see commit history for given lines
	// 5 lines, from 74 to 79
	git blame -L 74,+5 -- fileName.txt

force change in file name
	git mv -f OldFileNameCase newfilenamecase

delete untracked files
	//to see files that will be deleted
	git clean -n
	//to delete untracked files
	git clean -f

delete tracked files
	git rm fileName

rollback to a previous commit, erase history
	// assume you pushed bad commits to feature branch
	// want to erase those commits from history
	git checkout desiredCommitHash
	git push origin HEAD:branchName -f
	// will remove all traces of bad commits

add co-authors to a commit
	git commit -m "commit message
	> 
	Co-authored-by: name <name@example.com>
	Co-authored-by: another-name <another-name@example.com>"

list git config
	git config --list

initialize a git repo
	git init

connect git repo to github
	git remote add origin https://github.com/username/repo

template gitignore files
	https://gitignore.io

TODO find a faulty commit
	document git bisect process
